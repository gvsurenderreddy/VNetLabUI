// Generated by CoffeeScript 1.7.1
(function() {
  var LoginView, Topology, TopologyExists, Topologyid, Topologystatus, addLink, authenticate, authenticated, controllerurl, createTopology, debuglog, deleteTopology, getExistingTopology, hideWorkareaViews, hideallviews, links, log, nodenames, nodes, passcode, populateDevices, projectid, setTopologyIdwidget, setTopologyStatusWidget, setViewTopologyView, showmainviews, switches, viewTopology;

  controllerurl = "http://localhost:8888";

  projectid = null;

  passcode = null;

  authenticated = false;

  TopologyExists = false;

  Topologyid = null;

  Topologystatus = null;

  Topology = {};

  nodes = [];

  switches = [];

  nodenames = [];

  links = [];

  LoginView = function() {
    hideallviews();
    $("#headingarea").show();
    $("#workarea").show();
    $("#workarea1").hide();
    $("#autharea").show();
    return $("#logarea").show();
  };

  hideallviews = function() {
    $("#headingarea").hide();
    $("#workarea").hide();
    return $("#logarea").hide();
  };

  hideWorkareaViews = function() {
    $("createtopologyarea").hide();
    return $("viewtopologyarea").hide();
  };

  showmainviews = function() {
    hideallviews();
    $("#autharea").hide();
    $("#headingarea").show();
    $("#workarea").show();
    $("#logarea").show();
    $("#workarea1").show();
    $("#navarea").show();
    $("#createtopologyarea").hide();
    return $("#viewtopologyarea").hide();
  };

  $(function() {
    $("#navarea").accordion({
      collapsible: true,
      heightStyle: "content"
    });
    debuglog("DOM is ready");
    LoginView();
    $("#createtopolink").click((function(_this) {
      return function() {
        hideWorkareaViews();
        getExistingTopology();
        if (TopologyExists === false) {
          return $("#createtopologyarea").show();
        }
      };
    })(this));
    $("#viewtopolink").click((function(_this) {
      return function() {
        $("#createtopologyarea").hide();
        $("#viewtopologyarea").show();
        return viewTopology();
      };
    })(this));
    $("#deletetopolink").click((function(_this) {
      return function() {
        return deleteTopology();
      };
    })(this));
    $("#devicestatuslink").click((function(_this) {
      return function() {
        hideWorkareaViews();
        return $("#devices").show();
      };
    })(this));
    $("#deviceviewlink").click((function(_this) {
      return function() {
        return hideWorkareaViews();
      };
    })(this));
    return $("#configviewlink").click((function(_this) {
      return function() {
        return hideWorkareaViews();
      };
    })(this));
  });

  log = $("#tablelog");

  debuglog = function(mytext) {
    return $("#tablelog").append("<p>" + mytext + "<p>");
  };

  authenticate = function() {
    var url;
    projectid = $("#projectid").val();
    passcode = $("#passcode").val();
    url = "http://localhost:2222/project/" + projectid + "/passcode/" + passcode;
    debuglog("authentication url is " + url);
    return $.getJSON(url, (function(_this) {
      return function(result) {
        if (result.data != null) {
          authenticated = true;
          debuglog("project data  " + JSON.stringify(result.data));
          showmainviews();
          return getExistingTopology();
        } else {
          return debuglog("unknown project id");
        }
      };
    })(this));
  };

  getExistingTopology = function() {
    var url;
    if (authenticated === false) {
      return;
    }
    url = controllerurl + "/project/" + projectid;
    debuglog("get project topology url is " + url);
    return $.getJSON(url, (function(_this) {
      return function(result) {
        var _ref;
        debuglog("getTopology result is " + JSON.stringify(result));
        if (((_ref = result[0]) != null ? _ref.data : void 0) != null) {
          TopologyExists = true;
          Topologyid = result[0].id;
          debuglog("Topology id " + Topologyid);
          return debuglog("Topology Exists");
        } else {
          TopologyExists = false;
          return debuglog("No Topology Exists");
        }
      };
    })(this));
  };

  populateDevices = function() {
    var i, j, node, noofhosts, noofrouters, noofswitches, sw;
    noofswitches = $("#switches").val();
    noofrouters = $("#routers").val();
    noofhosts = $("#hosts").val();
    debuglog("No of Switches " + noofswitches);
    debuglog("No of Routers " + noofrouters);
    debuglog("No of Hosts " + noofhosts);
    i = 0;
    while (i < noofswitches) {
      sw = {
        "name": projectid + "Sw" + i,
        "type": "lan",
        "ports": "8",
        "make": "bridge"
      };
      switches.push(sw);
      i++;
    }
    j = 0;
    while (j < noofrouters) {
      node = {
        name: projectid + "Rtr" + j,
        type: "router",
        Services: [
          {
            name: "quagga"
          }
        ]
      };
      nodes.push(node);
      nodenames.push(node.name);
      j++;
    }
    i = 0;
    while (i < noofhosts) {
      node = {
        "name": projectid + "Host" + i,
        "type": "host"
      };
      nodes.push(node);
      nodenames.push(node.name);
      i++;
    }
    debuglog("Switches " + JSON.stringify(switches));
    debuglog("Nodes " + JSON.stringify(nodes));
    debuglog("NodeNames " + nodenames);
    $("#fromdevice").autocomplete({
      source: nodenames
    });
    $("#todevice").autocomplete({
      source: nodenames
    });
    return $("#routernames").val(nodenames);
  };

  addLink = function() {
    var connected_nodes, dstname, link, linkconfig, srcname, temp;
    connected_nodes = [];
    linkconfig = {
      "bandwidth": "256kbit",
      "latency": "100ms",
      "jitter": "10ms",
      "pktloss": "2%"
    };
    srcname = $("#fromdevice").val();
    dstname = $("#todevice").val();
    connected_nodes.push({
      "name": srcname
    });
    connected_nodes.push({
      "name": dstname
    });
    link = {
      type: "wan",
      "switch": "",
      connected_nodes: connected_nodes,
      "config": linkconfig
    };
    links.push(link);
    debuglog("link val is " + JSON.stringify(link));
    temp = $("#linknames").val();
    temp = temp + (", " + srcname + "-" + dstname);
    return $("#linknames").val(temp);
  };

  createTopology = function() {
    Topology = {
      name: $("#toponame").val(),
      projectid: projectid,
      passcode: passcode,
      switches: switches,
      nodes: nodes,
      links: links
    };
    debuglog("Topology object " + JSON.stringify(Topology));
    return $.ajax({
      url: controllerurl + "/topology",
      type: "post",
      data: Topology,
      error: function(jqXHR, textStatus, errorThrown) {
        debuglog("Error Response");
        debuglog(JSON.stringify(jqXHR));
        debuglog(JSON.stringify(textStatus));
        debuglog(JSON.stringify(errorThrown));
      },
      success: function(data, textStatus, jqXHR) {
        debuglog("Topology Creation success Response");
        debuglog(JSON.stringify(data));
        Topologyid = data.id;
        setTopologyIdwidget();
        Topologystatus = "creation-in-progress";
        setTopologyStatusWidget();
      }
    });
  };

  viewTopology = function() {
    var url;
    if (Topologyid == null) {
      debuglog("Topology doesnt exists ... Please create a Topology " + Topologyid);
      $("#viewtopologyarea").add("<H1> No associated Topology available for this project. Please create one for you <H1>");
    }
    url = controllerurl + "/topology/" + Topologyid + "/status";
    debuglog("get  topology  status url is " + url);
    return $.getJSON(url, (function(_this) {
      return function(result) {
        var formatop, key, node, val, _i, _len, _ref;
        debuglog("getTopology status result is " + JSON.stringify(result));
        formatop = "<td>Name</td><td>id</td><td>type</td><td>MgmtIP</td><td>status</td><br>";
        _ref = result.nodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          debuglog("node is " + JSON.stringify(node));
          formatop += "<tr>";
          for (key in node) {
            val = node[key];
            if (key === "id") {
              formatop += "<td>" + val + "</td>";
            }
            if (key === "config") {
              formatop += "<td>" + val.name + "</td>";
              formatop += "<td>" + val.type + "</td>";

              /*
              					if key is "ifmap"					
              						for ifm in val
              							for keyy, vall of ifm
              								ipa = val if keyy is "ipaddress"
              								type = val	if keyy is "type"
              								if type is "mgmt"
              									formatop += ip
              									break
               */
            }
            if (key === "status") {
              formatop += "<td>" + val.result + "</td>";
            }
            Topologystatus = val.result;
          }
          formatop += "</tr>";
        }
        debuglog("formatop " + formatop);
        setTopologyStatusWidget();
        return setViewTopologyView(formatop);
      };
    })(this));
  };

  deleteTopology = function() {
    var delurl;
    debuglog("Topology delete called  ..." + Topologyid);
    if (Topologyid == null) {
      debuglog("Topology doesnt exists ... Please create a Topology " + Topologyid);
    }
    delurl = controllerurl + "/topology/" + Topologyid;
    debuglog("Topology delete called  ..." + delurl);
    return $.ajax({
      url: delurl,
      type: "DELETE",
      error: function(jqXHR, textStatus, errorThrown) {
        debuglog("Error Response");
        debuglog(JSON.stringify(jqXHR));
        debuglog(JSON.stringify(textStatus));
        debuglog(JSON.stringify(errorThrown));
      },
      success: function(data, textStatus, jqXHR) {
        debuglog("Topology Detele success Response");
        debuglog(JSON.stringify(data));
        Topologyid = null;
      }
    });
  };

  setTopologyIdwidget = function() {
    $("#topologyid").val(Topologyid);
    return $("#tbltd_topologyid").append('<p>#{Topologyid}</p>');
  };

  setTopologyStatusWidget = function() {
    return $("#topologystatus").val(Topologystatus);
  };

  setViewTopologyView = function(value) {
    return $("#tbltr_devicestatus").append(value);
  };

}).call(this);
