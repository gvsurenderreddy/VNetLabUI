// Generated by CoffeeScript 1.7.1
var LoginView, ShowMainViews, Topology, TopologyExists, Topologyid, Topologystatus, addLink, authenticate, authenticated, controllerurl, createTopology, debuglog, deleteTopology, devices, getExistingTopology, hideAllContentAreaSubviews, hideAllMainViews, hideAllWorkAreaSubviews, links, log, nodenames, nodes, passcode, populateDeviceConfigView, populateDeviceStatisticsView, populateDeviceStatusView, populateDevices, populateViewTopologyDetails, populateprojectdetails, projectdata, projectid, projectview_data, setTopologyIdwidget, setTopologyStatusWidget, setViewTopologyView, switches, topologyview_data;

controllerurl = "http://localhost:8888";

projectid = null;

passcode = null;

projectdata = {};

authenticated = false;

TopologyExists = false;

Topologyid = null;

Topologystatus = null;

Topology = {};

nodes = [];

switches = [];

nodenames = [];

links = [];

devices = [];

projectview_data = null;

topologyview_data = null;

hideAllMainViews = function() {
  $("#HeaderArea").hide();
  $("#WorkArea").hide();
  return $("#LogArea").hide();
};

hideAllWorkAreaSubviews = function() {
  $("#AuthenticationArea").hide();
  return $("#ContentArea").hide();
};

hideAllContentAreaSubviews = function() {
  $("#ProjectDetailsArea").hide();
  $("#TopologyCreateArea").hide();
  $("#TopologyViewArea").hide();
  $("#TopologyDeleteArea").hide();
  $("#DeviceConfigArea").hide();
  $("#DeviceStatisticsArea").hide();
  return $("#CustomConfigArea").hide();
};

LoginView = function() {
  hideAllMainViews();
  hideAllWorkAreaSubviews();
  hideAllContentAreaSubviews();
  $("#HeaderArea").show();
  $("#WorkArea").show();
  return $("#AuthenticationArea").show();
};

ShowMainViews = function() {
  hideAllWorkAreaSubviews();
  hideAllMainViews();
  hideAllContentAreaSubviews();
  $("#HeaderArea").show();
  $("#WorkArea").show();
  $("#LogArea").show();
  $("#ContentArea").show();
  hideAllContentAreaSubviews();
  return $("#NavigationArea").show();
};

$(function() {
  $("#NavigationArea").accordion({
    collapsible: true,
    heightStyle: "content"
  });
  $("#devicestatistics_tabs").tabs();
  debuglog("DOM is ready");
  LoginView();
  $("#projectdetailslink").click((function(_this) {
    return function() {
      hideAllContentAreaSubviews();
      if (projectview_data === null) {
        populateprojectdetails();
        $("#ProjectDetailsArea").append(projectview_data);
      }
      return $("#ProjectDetailsArea").show();
    };
  })(this));
  $("#createtopologylink").click((function(_this) {
    return function() {
      hideAllContentAreaSubviews();
      getExistingTopology();
      if (TopologyExists === false) {
        return $("#TopologyCreateArea").show();
      }
    };
  })(this));
  $("#viewtopologylink").click((function(_this) {
    return function() {
      hideAllContentAreaSubviews();
      populateViewTopologyDetails();
      return $("#TopologyViewArea").show();
    };
  })(this));
  $("#deletetopologylink").click((function(_this) {
    return function() {
      hideAllContentAreaSubviews();
      deleteTopology();
      return $("#TopologyDeleteArea").show();
    };
  })(this));
  $("#deviceconfiglink").click((function(_this) {
    return function() {
      hideAllContentAreaSubviews();
      return $("#DeviceConfigArea").show();
    };
  })(this));
  $("#devicestatuslink").click((function(_this) {
    return function() {
      hideAllContentAreaSubviews();
      return $("#DeviceStatusArea").show();
    };
  })(this));
  $("#devicestatisticslink").click((function(_this) {
    return function() {
      hideAllContentAreaSubviews();
      return $("#DeviceStatisticsArea").show();
    };
  })(this));
  return $("#linkprofilelink").click((function(_this) {
    return function() {
      hideAllContentAreaSubviews();
      return $("#CustomConfigArea").show();
    };
  })(this));
});

log = $("#tablelog");

debuglog = function(mytext) {
  return $("#tablelog").append("<p>" + mytext + "<p>");
};

authenticate = function() {
  var url;
  console.log("authenticate called");
  projectid = $("#projectid").val();
  passcode = $("#passcode").val();
  url = "http://localhost:2222/project/" + projectid + "/passcode/" + passcode;
  debuglog("authentication url is " + url);
  return $.getJSON(url, (function(_this) {
    return function(result) {
      if (result.data != null) {
        authenticated = true;
        debuglog("project data  " + JSON.stringify(result.data));
        projectdata = result.data;
        ShowMainViews();
        return getExistingTopology();
      } else {
        return debuglog("unknown project id");
      }
    };
  })(this));
};

populateprojectdetails = function() {
  var key, val;
  projectview_data = "<table>";
  for (key in projectdata) {
    val = projectdata[key];
    projectview_data += "<tr><td>" + key + "</td><td>" + val + "</td></tr>";
  }
  projectview_data += "</table>";
  return debuglog("projectview_data " + projectview_data);
};

getExistingTopology = function() {
  var url;
  if (authenticated === false) {
    return;
  }
  url = controllerurl + "/project/" + projectid;
  debuglog("get project topology url is " + url);
  return $.getJSON(url, (function(_this) {
    return function(result) {
      var _ref;
      debuglog("getTopology result is " + JSON.stringify(result));
      if (((_ref = result[0]) != null ? _ref.data : void 0) != null) {
        TopologyExists = true;
        Topologyid = result[0].id;
        debuglog("Topology id " + Topologyid);
        return debuglog("Topology Exists");
      } else {
        TopologyExists = false;
        return debuglog("No Topology Exists");
      }
    };
  })(this));
};

populateViewTopologyDetails = function() {
  var url;
  $("#TopologyViewArea").empty();
  if (Topologyid == null) {
    debuglog("Topology doesnt exists ... Please create a Topology " + Topologyid);
    $("#TopologyViewArea").append("<H1 > No associated Topology available for this project. Please create one for you <H1>");
    return;
  }
  url = controllerurl + "/topology/" + Topologyid + "/status";
  debuglog("get  topology  status url is " + url);
  return $.getJSON(url, (function(_this) {
    return function(result) {
      var key, node, val, _i, _len, _ref;
      debuglog("getTopology status result is " + JSON.stringify(result));
      topologyview_data = "<table><tr><td>UUID</td><td>Name</td><td>Type</td><td>MgmtIP</td><td>status</td></tr>";
      devices = result.nodes;
      _ref = result.nodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        debuglog("node is " + JSON.stringify(node));
        topologyview_data += "<tr>";
        for (key in node) {
          val = node[key];
          if (key === "id") {
            topologyview_data += "<td>" + val + "</td>";
          }
          if (key === "config") {
            topologyview_data += "<td>" + val.name + "</td>";
            topologyview_data += "<td>" + val.type + "</td>";

            /*
            					if key is "ifmap"					
            						for ifm in val
            							for keyy, vall of ifm
            								ipa = val if keyy is "ipaddress"
            								type = val	if keyy is "type"
            								if type is "mgmt"
            									formatop += ip
            									break
             */
          }
          if (key === "status") {
            topologyview_data += "<td>" + val.result + "</td>";
          }
          Topologystatus = val.result;
        }
        topologyview_data += "</tr>";
      }
      topologyview_data += "</table>";
      debuglog("topologyview_data " + topologyview_data);
      return $("#TopologyViewArea").append(topologyview_data);
    };
  })(this));
};

populateDeviceConfigView = function() {};

populateDeviceStatusView = function() {};

populateDeviceStatisticsView = function() {};

populateDevices = function() {
  var i, j, node, noofhosts, noofrouters, noofswitches, sw;
  noofswitches = $("#switches").val();
  noofrouters = $("#routers").val();
  noofhosts = $("#hosts").val();
  debuglog("No of Switches " + noofswitches);
  debuglog("No of Routers " + noofrouters);
  debuglog("No of Hosts " + noofhosts);
  i = 0;
  while (i < noofswitches) {
    sw = {
      "name": projectid + "Sw" + i,
      "type": "lan",
      "ports": "8",
      "make": "bridge"
    };
    switches.push(sw);
    i++;
  }
  j = 0;
  while (j < noofrouters) {
    node = {
      name: projectid + "Rtr" + j,
      type: "router",
      Services: [
        {
          name: "quagga"
        }
      ]
    };
    nodes.push(node);
    nodenames.push(node.name);
    j++;
  }
  i = 0;
  while (i < noofhosts) {
    node = {
      "name": projectid + "Host" + i,
      "type": "host"
    };
    nodes.push(node);
    nodenames.push(node.name);
    i++;
  }
  debuglog("Switches " + JSON.stringify(switches));
  debuglog("Nodes " + JSON.stringify(nodes));
  debuglog("NodeNames " + nodenames);
  $("#fromdevice").autocomplete({
    source: nodenames
  });
  $("#todevice").autocomplete({
    source: nodenames
  });
  return $("#routernames").val(nodenames);
};

addLink = function() {
  var connected_nodes, dstname, link, linkconfig, srcname, temp;
  connected_nodes = [];
  linkconfig = {
    "bandwidth": "256kbit",
    "latency": "100ms",
    "jitter": "10ms",
    "pktloss": "2%"
  };
  srcname = $("#fromdevice").val();
  dstname = $("#todevice").val();
  connected_nodes.push({
    "name": srcname
  });
  connected_nodes.push({
    "name": dstname
  });
  link = {
    type: "wan",
    "switch": "",
    connected_nodes: connected_nodes,
    "config": linkconfig
  };
  links.push(link);
  debuglog("link val is " + JSON.stringify(link));
  temp = $("#linknames").val();
  temp = temp + (", " + srcname + "-" + dstname);
  return $("#linknames").val(temp);
};

createTopology = function() {
  Topology = {
    name: $("#toponame").val(),
    projectid: projectid,
    passcode: passcode,
    switches: switches,
    nodes: nodes,
    links: links
  };
  debuglog("Topology object " + JSON.stringify(Topology));
  return $.ajax({
    url: controllerurl + "/topology",
    type: "post",
    data: Topology,
    error: function(jqXHR, textStatus, errorThrown) {
      debuglog("Error Response");
      debuglog(JSON.stringify(jqXHR));
      debuglog(JSON.stringify(textStatus));
      debuglog(JSON.stringify(errorThrown));
    },
    success: function(data, textStatus, jqXHR) {
      debuglog("Topology Creation success Response");
      debuglog(JSON.stringify(data));
      Topologyid = data.id;
      setTopologyIdwidget();
      Topologystatus = "creation-in-progress";
      setTopologyStatusWidget();
    }
  });
};

deleteTopology = function() {
  var delurl;
  debuglog("Topology delete called  ..." + Topologyid);
  if (Topologyid == null) {
    debuglog("Topology doesnt exists ... Please create a Topology " + Topologyid);
  }
  delurl = controllerurl + "/topology/" + Topologyid;
  debuglog("Topology delete called  ..." + delurl);
  return $.ajax({
    url: delurl,
    type: "DELETE",
    error: function(jqXHR, textStatus, errorThrown) {
      debuglog("Error Response");
      debuglog(JSON.stringify(jqXHR));
      debuglog(JSON.stringify(textStatus));
      debuglog(JSON.stringify(errorThrown));
    },
    success: function(data, textStatus, jqXHR) {
      debuglog("Topology Detele success Response");
      debuglog(JSON.stringify(data));
      Topologyid = null;
    }
  });
};

setTopologyIdwidget = function() {
  $("#topologyid").val(Topologyid);
  return $("#tbltd_topologyid").append('<p>#{Topologyid}</p>');
};

setTopologyStatusWidget = function() {
  return $("#topologystatus").val(Topologystatus);
};

setViewTopologyView = function(value) {
  debuglog("value is " + value);
  return $("#tbltrdevicestatus").append(value);
};
